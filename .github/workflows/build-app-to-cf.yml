name: Build FeralFile App for ARM64 to Cloudflare R2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to build"
        required: false
        default: "Development"
        type: choice
        options:
          - Development
          - Production
      version:
        required: true
        type: string
        description: 'Application version'
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Application version'
      environment:
        description: "Environment to build"
        required: false
        default: "Development"
        type: string
    secrets:
      CLOUDFLARE_ACCESS_KEY_ID:
        required: true
      CLOUDFLARE_SECRET_ACCESS_KEY:
        required: true
      CLOUDFLARE_ACCOUNT_ID:
        required: true
      SUPPORT_URL:
        required: true
      SUPPORT_API_KEY:
        required: true
      METRICS_URL:
        required: true
      METRICS_API_KEY:
        required: true
      APT_GPG_SIGN_KEY_PASSPHRASE:
        required: true
      APT_GPG_SIGN_KEY_ID:
        required: true
      SENTRY_DSN_BLUETOOTH_LIB:
        required: true
      SENTRY_DSN_APP:
        required: true

jobs:
  build:
    name: Build and Package App
    runs-on: ['self-hosted', 'ARM64']
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'Production' || 'Development') }}
    defaults:
      run:
        working-directory: launcher-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libbluetooth-dev \
            libgtk-3-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libblkid-dev \
            liblzma-dev \
            libsecret-1-dev \
            libjsoncpp-dev \
            at-spi2-core \
            libatspi2.0-dev \
            libglib2.0-dev \
            libdbus-1-dev \
            libdbus-glib-1-dev \
            bluetooth \
            bluez \
            bluez-tools            bluez-tools \
            libcurl4-openssl-dev \
            zlib1g-dev

          # Set pkg-config path
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig:/usr/share/pkgconfig

          # Verify installations
          echo "Checking ATK version:"
          pkg-config --modversion atk
          echo "Checking GTK version:"
          pkg-config --modversion gtk+-3.0
          echo "Checking AT-SPI version:"
          pkg-config --modversion atspi-2

      - name: Write secrets to .env file
        run: |
          # Clear existing file if any
          rm -f .env

          # Write secrets
          # Enviroment: ${{ inputs.environment }}
          echo "SUPPORT_URL=${{ secrets.SUPPORT_URL }}" >> .env
          echo "SUPPORT_API_KEY=${{ secrets.SUPPORT_API_KEY }}" >> .env
          echo "APP_VERSION=${{ inputs.version }}" >> .env
          echo "METRICS_URL=${{ secrets.METRICS_URL }}" >> .env
          echo "METRICS_API_KEY=${{ secrets.METRICS_API_KEY }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN_APP }}" >> .env
          
          # Debug file contents (showing first 4 chars of values)
          echo "Contents of .env (first 4 chars of values):"
          while IFS='=' read -r key value; do
            echo "$key=${value:0:4}..."
          done < .env

      - name: Get Flutter dependencies
        run: |
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig:/usr/share/pkgconfig
          flutter pub get

      - name: Build Sentry SDK
        run: |
          git clone https://github.com/getsentry/sentry-native.git
          cd sentry-native
          # Explicitly initialize and update all submodules
          git submodule init
          git submodule update --recursive
          
          # Configure with a different backend since crashpad is causing issues
          cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSENTRY_BACKEND=inproc
          cmake --build build --parallel
          sudo cmake --install build
          cd ..

      - name: Build C library
        run: |
          cd feralfile-bluetooth
          make clean
          make SENTRY_DSN='${{ secrets.SENTRY_DSN_BLUETOOTH_LIB }}' APP_VERSION='${{ inputs.version }}'
          mkdir -p ../build/linux/arm64/release/bundle/lib/
          cp libbluetooth_service.so ../build/linux/arm64/release/bundle/lib/
          cd ..

      - name: Configure ATK
        run: |
          # Ensure AT-SPI is running
          sudo systemctl start at-spi-dbus-bus.service || true
          # Set GTK accessibility
          export GTK_MODULES=gail:atk-bridge
          export NO_AT_BRIDGE=0
          # Set pkg-config path
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig:/usr/share/pkgconfig

      - name: Build Flutter app for Linux
        run: |
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig:/usr/share/pkgconfig
          flutter config --enable-linux-desktop
          flutter build linux --release --target-platform=linux-arm64

      - name: Upload debug symbols to Sentry
        run: |
          # Install Sentry CLI
          curl -sL https://sentry.io/get-cli/ | bash
          
          # Authenticate with Sentry
          export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          export SENTRY_ORG=${{ vars.SENTRY_ORG }}
          export SENTRY_PROJECT=${{ vars.SENTRY_PROJECT }}
          
          # Set release version if on main branch
          # if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Extract version from pubspec.yaml
            VERSION=$(grep -m 1 'version:' pubspec.yaml | awk '{print $2}' | tr -d "'\"")
            export SENTRY_RELEASE="$VERSION"
            echo "Setting Sentry release to $SENTRY_RELEASE"
            
            # Create a release in Sentry
            sentry-cli releases new "$SENTRY_RELEASE"
            sentry-cli releases set-commits "$SENTRY_RELEASE" --auto
          # fi
          
          # Upload debug symbols
          sentry-cli debug-files upload \
            --include-sources \
            --wait \
            build/linux/arm64/release/bundle/
          
          # Finalize release if on main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ -n "$SENTRY_RELEASE" ]]; then
            sentry-cli releases finalize "$SENTRY_RELEASE"
            echo "Finalized Sentry release $SENTRY_RELEASE"
          fi
          
          # Verify upload
          echo "Debug symbols uploaded to Sentry"

      - name: Package as Debian .deb
        env:
          APP_NAME: feralfile-launcher
          VERSION: ${{ inputs.version }}
          ARCH: arm64
          DESCRIPTION: "Feral File Connection Assistant"
          MAINTAINER: "Bitmark Inc <support@feralfile.com>"
          INSTALL_DIR: "/opt/feralfile"
          DEPENDS: "gldriver-test, chromium, rpi-chromium-mods, fonts-droid-fallback, fonts-liberation2, x11-xserver-utils, xdotool, xserver-xorg, xserver-xorg-video-fbdev, xinit, openbox, lightdm, bluez, zenity, jq, unattended-upgrades"
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package$INSTALL_DIR/lib
          cp -r build/linux/arm64/release/bundle/* package$INSTALL_DIR/
          cp feralfile-bluetooth/libbluetooth_service.so package$INSTALL_DIR/lib/

          cat <<EOF > package/DEBIAN/control
          Package: $APP_NAME
          Version: $VERSION
          Section: base
          Priority: optional
          Architecture: arm64
          Maintainer: $MAINTAINER
          Depends: $DEPENDS
          Description: $DESCRIPTION
          EOF

          chmod -R 755 package$INSTALL_DIR
          dpkg-deb --build package ${APP_NAME}_${VERSION}_arm64.deb

      - name: Install rclone
        run: |
          sudo apt-get update && sudo apt-get install -y rclone

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
          endpoint = https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          acl = private
          no_check_bucket = true
          EOF

      - name: Download all deb files from the same branch
        run: |
          mkdir -p dist/pool/${{ github.ref_name }}
          cp feralfile-launcher_${{ inputs.version }}_arm64.deb dist/pool/${{ github.ref_name }}/feralfile-launcher_${{ inputs.version }}_arm64.deb
          rclone copy "r2:${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.ref_name }}" "dist/pool/${{ github.ref_name }}" \
            --include "*.deb" \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=32 \
            --verbose \
            --stats=1s      
      
      - name: Form the APT release files
        run: |
          cd dist
          dpkg-scanpackages --arch arm64 --multiversion pool > Packages
          cat Packages | gzip -9 > Packages.gz
          chmod +x ../../scripts/create-release.sh
          ../../scripts/create-release.sh ${{ github.ref_name }} ${{ inputs.version }} > Release
          gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${{ secrets.APT_GPG_SIGN_KEY_PASSPHRASE }}" \
              --default-key "${{ secrets.APT_GPG_SIGN_KEY_ID }}" \
              --clearsign -o InRelease Release

      - name: Upload to Cloudflare R2
        run: |
          rclone copy feralfile-launcher_${{ inputs.version }}_arm64.deb r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}
          rclone copy dist/Release r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}
          rclone copy dist/Packages r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}
          rclone copy dist/Packages.gz r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}
          rclone copy dist/InRelease r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}