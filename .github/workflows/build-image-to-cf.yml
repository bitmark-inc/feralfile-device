name: Build Arch Linux Image for Radxa X4

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
        default: '0.0.1'
      existing_app_version:
        description: 'Existing app version (leave empty to build new app)'
        required: false
        type: string
      environment:
        description: "Environment to build"
        required: false
        default: "Development"
        type: choice
        options:
          - Development
          - Production

jobs:
  # --- STEP 1: Build or use existing launcher app ---
  build-app:
    name: Build Launcher App for x86_64
    if: ${{ github.event.inputs.existing_app_version == '' }}
    uses: ./.github/workflows/build-app-x86.yml
    with:
      version: ${{ github.event.inputs.version }}
      environment: ${{ github.event.inputs.environment }}
    secrets: inherit

  # --- STEP 2: Build Arch Linux Image for Radxa X4 ---
  build-image:
    name: Generate Arch Linux Image for Radxa X4
    runs-on: ubuntu-latest
    needs: [build-app]
    if: ${{ always() && (needs.build-app.result == 'success' || needs.build-app.result == 'skipped') }}
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'Production' || 'Development') }}
    
    container:
      image: archlinux:latest
      options: --privileged

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm archiso arch-install-scripts dosfstools libisoburn squashfs-tools \
            git curl wget base-devel jq rclone zip unzip fakeroot binutils

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
          endpoint = https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          acl = private
          no_check_bucket = true
          EOF

      - name: Prepare Build Environment
        run: |
          # Copy the archiso-radxa-x4 profile from repository to build directory
          mkdir -p /build
          cp -r $GITHUB_WORKSPACE/archiso-radxa-x4 /build/
          
          # Create a working directory for package conversion
          mkdir -p /build/work/local_repo
          
          # Download the launcher app
          APP_VERSION="${{ github.event.inputs.existing_app_version || github.event.inputs.version }}"
          rclone copy "r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}/feralfile-launcher_${APP_VERSION}_amd64.deb" \
            /build/work/local_repo/ \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=7 \
            --verbose \
            --stats=1s
          
          # Set up a temporary directory for conversion
          mkdir -p /build/work/debtap
          cd /build/work/debtap
          
          # Install debtap and dependencies
          sudo apt-get update
          sudo apt-get install -y fakeroot binutils
          git clone https://github.com/helixarch/debtap.git
          sudo cp debtap/debtap /usr/local/bin/
          sudo chmod +x /usr/local/bin/debtap
          export TERM=xterm
          
          # Convert the .deb to Arch package
          cd /build/work/local_repo
          DEB_FILE=$(ls *.deb | head -n 1)
          /build/work/debtap/debtap "$DEB_FILE" -q
          
          # Create local repository
          repo-add custom.db.tar.zst *.pkg.tar.zst
          
          # Add the repository to pacman.conf
          echo -e "\n[custom]\nSigLevel = Optional TrustAll\nServer = file:///build/work/local_repo" >> /build/archiso-radxa-x4/pacman.conf

      - name: Install extraction tools
        run: |
          sudo pacman -Sy --noconfirm binutils
          
      - name: Extract launcher .deb package
        run: |
          mkdir -p /tmp/launcher-extract
          cd /tmp/launcher-extract
          ar x /path/to/feralfile-launcher_0.4.6_amd64.deb
          mkdir -p $GITHUB_WORKSPACE/archiso-radxa-x4/airootfs/usr/bin
          mkdir -p $GITHUB_WORKSPACE/archiso-radxa-x4/airootfs/usr/share
          tar xf data.tar.xz
          cp -r usr/bin/* $GITHUB_WORKSPACE/archiso-radxa-x4/airootfs/usr/bin/
          cp -r usr/share/* $GITHUB_WORKSPACE/archiso-radxa-x4/airootfs/usr/share/

      - name: Build ISO Image
        run: |
          cd /build
          
          # Build the ISO
          mkarchiso -v -w /build/work -o /build/out /build/archiso-radxa-x4
          
          # Rename the ISO
          ISO_FILE=$(find /build/out -name "*.iso" | head -n 1)
          if [ -f "$ISO_FILE" ]; then
            NEW_NAME="radxa-x4-arch-${{ github.event.inputs.version }}.iso"
            mv "$ISO_FILE" "/build/out/$NEW_NAME"
            echo "ISO created: /build/out/$NEW_NAME"
          else
            echo "Error: ISO file not found"
            exit 1
          fi

      - name: Compress and Upload Image
        run: |
          cd /build/out
          
          # Compress the ISO
          ISO_FILE="radxa-x4-arch-${{ github.event.inputs.version }}.iso"
          zip -j "radxa-x4-arch-${{ github.event.inputs.version }}.zip" "$ISO_FILE"
          
          # Upload to Cloudflare R2
          rclone copyto "radxa-x4-arch-${{ github.event.inputs.version }}.zip" \
            "r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}/radxa-x4-arch-${{ github.event.inputs.version }}.zip" \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=7 \
            --verbose \
            --stats=1s
          
          echo "Image successfully uploaded to R2"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /build/work
