name: Build Arch Linux Image for Radxa X4

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
        default: '0.0.1'
      soak-test:
        description: 'Include soak test'
        required: true
        type: choice
        options:
          - true
          - false
        default: false
      environment:
        description: "Environment to build"
        required: false
        default: "Production"
        type: choice
        options:
          - Development
          - Production

jobs:
  build-feral-connectd:
    name: Build Feral Connectd
    uses: ./.github/workflows/build-components.yaml
    secrets:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
    with:
      component: feral-connectd
      version: ${{ github.event.inputs.version }}
      description: 'Feral File Connectd Service'
      maintainer: 'Feral File'
      
  build-feral-setupd:
    name: Build Feral Setupd
    uses: ./.github/workflows/build-components.yaml
    secrets:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
    with:
      component: feral-setupd
      version: ${{ github.event.inputs.version }}
      description: 'Feral File Setup Service'
      maintainer: 'Feral File'

  build-feral-sys-monitord:
    name: Build Feral System Monitord
    uses: ./.github/workflows/build-components.yaml
    secrets:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
    with:
      component: feral-sys-monitord
      version: ${{ github.event.inputs.version }}
      description: 'Feral File System Monitord'
      maintainer: 'Feral File'

  build-feral-watchdog:
    name: Build Feral Watchdog
    uses: ./.github/workflows/build-components.yaml
    secrets:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
    with:
      component: feral-watchdog
      version: ${{ github.event.inputs.version }}
      description: 'Feral File Watchdog'
      maintainer: 'Feral File'

  build-feralfile-pacman-repo:
    name: Build Feralfile pacman repo
    needs: [build-feral-connectd, build-feral-setupd, build-feral-sys-monitord, build-feral-watchdog]
    uses: ./.github/workflows/pacman-repo.yaml
    secrets:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}

  build-image:
    name: Generate Arch Linux Image for Radxa X4
    runs-on: ubuntu-latest
    needs: [build-feralfile-pacman-repo]
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'Production' || 'Development') }}

    container:
      image: archlinux:latest
      options: --privileged

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm archiso arch-install-scripts dosfstools libisoburn squashfs-tools \
            git curl rclone wget base-devel jq zip unzip fakeroot binutils

      - name: Copy archiso profile
        run: |
          mkdir -p /build
          cp -r archiso-radxa-x4 /build/
          if [ "${{ inputs.soak-test }}" == "false" ]; then
            rm -rf /build/archiso-radxa-x4/airootfs/root/soak-test
            rm -f /build/archiso-radxa-x4/airootfs/root/soak-test.sh
            rm -f /build/archiso-radxa-x4/efiboot/loader/entries/archiso-x86_64-linux-soak-test.conf
          else 
            cat >> /build/archiso-radxa-x4/packages.x86_64 << EOF
          # soak test tools
          foot
          bc
          stress-ng
          mesa-utils
          python-rich
          EOF
          fi 

      - name: Inject pacman.conf
        env:
          AUTH_USER: ${{ secrets.DISTRIBUTION_AUTH_USER }}
          AUTH_PASS: ${{ secrets.DISTRIBUTION_AUTH_PASSWORD }}
        run: |
          set -e

          ENCODED_USER=$(printf '%s' "$AUTH_USER" | jq -sRr @uri)
          ENCODED_PASS=$(printf '%s' "$AUTH_PASS" | jq -sRr @uri)

          cat >> /build/archiso-radxa-x4/pacman.conf << EOF
          [feralfile]
          SigLevel = Optional TrustAll
          Server = https://${ENCODED_USER}:${ENCODED_PASS}@feralfile-device-distribution.bitmark-development.workers.dev/archlinux/${{ github.ref_name }}/os/\$arch
          EOF

          cp /build/archiso-radxa-x4/pacman.conf /build/archiso-radxa-x4/airootfs/etc/pacman.conf

      - name: Copy UI files
        run: |
          mkdir -p /build/archiso-radxa-x4/airootfs/opt/feral/ui/launcher
          cp -r components/launcher-ui/* /build/archiso-radxa-x4/airootfs/opt/feral/ui/launcher/
          mkdir -p /build/archiso-radxa-x4/airootfs/opt/feral/ui/player
          cp -r components/player-wrapper-ui/* /build/archiso-radxa-x4/airootfs/opt/feral/ui/player/
          mkdir -p /build/archiso-radxa-x4/airootfs/home/feralfile/.logs

      - name: Add Configs and Services
        run: |
          # Add connectd config
          mkdir -p /build/archiso-radxa-x4/airootfs/home/feralfile/.config
          cat > /build/archiso-radxa-x4/airootfs/home/feralfile/.config/connectd.json << EOF
          {
            "relayer": {
                "endpoint": "${{ vars.RELAYER_ENDPOINT }}",
                "apiKey": "${{ secrets.RELAYER_API_KEY }}"
            },
            "cdp": {
                "endpoint": "http://127.0.0.1:9222"
            }
          }
          EOF
          chmod 755 /build/archiso-radxa-x4/airootfs/home/feralfile/.config/connectd.json

          # Add watchdog config
          cat > /build/archiso-radxa-x4/airootfs/home/feralfile/.config/watchdog.json << EOF
          {
            "cdp_endpoint": "http://127.0.0.1:9222"
          }
          EOF

          cat > /build/archiso-radxa-x4/airootfs/home/feralfile/x1-config.json << EOF
          {
            "branch": "${{ github.ref_name }}",
            "version": "${{ github.event.inputs.version }}",
            "distribution_acc": "${{ secrets.DISTRIBUTION_AUTH_USER }}",
            "distribution_pass": "${{ secrets.DISTRIBUTION_AUTH_PASSWORD }}"
          }
          EOF
          chmod 755 /build/archiso-radxa-x4/airootfs/home/feralfile/x1-config.json

      - name: Setup pacman
        run: |
          curl -o /etc/pacman.d/mirrorlist "https://archlinux.org/mirrorlist/?country=US&protocol=https&ip_version=4&use_mirror_status=on"
          sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist
          pacman-key --init
          pacman-key --populate archlinux
          pacman -Syy --debug

          # copy US mirror list to iso
          mkdir -p /build/archiso-radxa-x4/airootfs/etc/pacman.d
          cp /etc/pacman.d/mirrorlist /build/archiso-radxa-x4/airootfs/etc/pacman.d/mirrorlist

      - name: Build ISO Image
        run: |
          cd /build
          mkarchiso -v -w /build/work -o /build/out /build/archiso-radxa-x4
          ISO_FILE=$(find /build/out -name "*.iso" | head -n 1)
          if [ -f "$ISO_FILE" ]; then
            NEW_NAME="radxa-x4-arch-${{ github.event.inputs.version }}.iso"
            mv "$ISO_FILE" "/build/out/$NEW_NAME"
            echo "ISO created: /build/out/$NEW_NAME"
          else
            echo "Error: ISO file not found"
            exit 1
          fi

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
          endpoint = https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          acl = private
          no_check_bucket = true
          EOF

      - name: Compress and Upload Image
        run: |
          cd /build/out
          ISO_FILE="radxa-x4-arch-${{ github.event.inputs.version }}.iso"
          zip -j "radxa-x4-arch-${{ github.event.inputs.version }}.zip" "$ISO_FILE"
          rclone copyto "radxa-x4-arch-${{ github.event.inputs.version }}.zip" \
            "r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}/radxa-x4-arch-${{ github.event.inputs.version }}.zip" \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=7 \
            --verbose \
            --stats=1s
          echo "Image successfully uploaded to R2"

      - name: Cleanup
        if: always()
        run: |
          rm -rf /build