name: Build Feral File Device Image to Cloudflare R2

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
        default: '0.0.1'
      existing_app_version:
        description: 'Existing app version (leave empty to build new app)'
        required: false
        type: string

      environment:
        description: "Environment to build"
        required: false
        default: "Development"
        type: choice
        options:
          - Development
          - Production

jobs:
  # --- STEP 1: Reuse Build App Job ---
  build-app:
    name: Build Feral File Launcher App
    if: ${{ github.event.inputs.existing_app_version == '' }}
    uses: ./.github/workflows/build-app-to-cf.yml
    with:
      version: ${{ github.event.inputs.version }}
      environment: ${{ github.event.inputs.environment }}
    secrets:
      CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      SUPPORT_URL: ${{ secrets.SUPPORT_URL }}
      SUPPORT_API_KEY: ${{ secrets.SUPPORT_API_KEY }}
      METRICS_URL: ${{ secrets.METRICS_URL }}
      METRICS_API_KEY: ${{ secrets.METRICS_API_KEY }}
      APT_GPG_SIGN_KEY_PASSPHRASE: ${{ secrets.APT_GPG_SIGN_KEY_PASSPHRASE }}
      APT_GPG_SIGN_KEY_ID: ${{ secrets.APT_GPG_SIGN_KEY_ID }}

  # --- STEP 2: Build Raspberry Pi Image ---
  build-image:
    name: Generate Raspberry Pi OS Image
    runs-on: ['self-hosted', 'ARM64']
    needs: [build-app]
    if: ${{ always() && (needs.build-app.result == 'success' || needs.build-app.result == 'skipped') }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install rclone
        run: |
          sudo apt-get update && sudo apt-get install -y rclone

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
          endpoint = https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          acl = private
          no_check_bucket = true
          EOF

      - name: Download Launcher App from R2
        run: |
          APP_VERSION="${{ github.event.inputs.existing_app_version || github.event.inputs.version }}"
          rclone copyto "r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}/feralfile-launcher_${APP_VERSION}_arm64.deb" "custom-stage/01-install-app/feralfile-launcher_arm64.deb" \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=32 \
            --verbose \
            --stats=1s
          cat > custom-stage/01-install-app/feralfile-launcher.conf << EOF
          app_branch = ${{ github.ref_name }}
          distribution_auth_user = ${{ secrets.DISTRIBUTION_AUTH_USER }}
          distribution_auth_password = ${{ secrets.DISTRIBUTION_AUTH_PASSWORD }}
          EOF

      - name: Build Pi OS Image with pi-gen-action
        uses: usimd/pi-gen-action@v1
        with:
          image-name: feralfile-device-${{ github.event.inputs.version }}
          stage-list: stage0 ./custom-stage-1 stage1 stage2 ./custom-stage
          compression: zip
          compression-level: 6
          username: feralfile
          password: feralfile
          pi-gen-version: arm64
          hostname: FeralFileDevice
          locale: en_US.UTF-8
          keyboard-keymap: us
          keyboard-layout: English (US)
          release: bookworm
          enable-ssh: 0
          disable-first-boot-user-rename: 1
          export-last-stage-only: true
          wpa-country: 'US'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          verbose-output: true

      - name: Upload to Cloudflare R2
        run: |
          # Get the first zip file from the deploy directory
          IMAGE_FILE=$(ls pi-gen/deploy/*.zip | head -n 1)
          # Upload with rclone using multiple threads and verbose logging
          rclone copyto "$IMAGE_FILE" "r2:${{vars.CLOUDFLARE_R2_BUCKET_NAME}}/${{ github.ref_name }}/feralfile_device_${{ github.event.inputs.version }}.zip" \
            --s3-upload-cutoff=100M \
            --s3-chunk-size=100M \
            --transfers=7 \
            --verbose \
            --stats=1s

      - name: Cleanup Docker Containers
        if: always()
        run: sudo docker rm -v pigen_work || true
